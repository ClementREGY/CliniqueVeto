<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="BTN_Dossier.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RK5CYII=
</value>
  </data>
</root>